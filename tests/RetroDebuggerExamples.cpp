#include <RetroDebuggerApi.h>

#include "RetroDebuggerTests_assets.h"

#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include <array>
#include <numeric>

/******************************************************************************
 * TODOs
 *
 ******************************************************************************/

namespace IntegrationTests {
// clang-format off
// Gameboy BIOS is used as an example of gameboy binary code.
static constexpr auto GameboyBios = std::array{
    0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E, //0x00
    0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0, //0x10
    0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B, //0x20
    0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9, //0x30
    0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20, //0x40
    0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04, //0x50
    0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2, //0x60
    0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06, //0x70
    0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20, //0x80
    0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17, //0x90
    0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, //0xA0
    0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, //0xB0
    0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, //0xC0
    0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C, //0xD0
    0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20, //0xE0
    0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50  //0xF0
};
// clang-format on

static constexpr auto MessageWhenEnteringDebugLoop = "Break detected\n(rdb) ";
static constexpr auto Prompt = "(rdb)";

class RetroDebuggerExamples : public ::testing::Test {
protected:
    void SetUp() override {
        Rdb::ParseXmlFile(std::string(RetroDebuggerTests::Assets::GameboyOperationsDebuggerXml)); // Using a Gameboy debug configuration

        Rdb::SetGetPcRegCallback([this]() { return m_pc; }); // Set up a callback so RetroDebugger can know the current program counter register value.
        Rdb::SetReadMemoryCallback([this](unsigned int address) { // Set up a callback so RetroDebugger can know the values at specific addresses.
            return address <= std::numeric_limits<uint8_t>::max() ? GameboyBios[address] : 0xFF;
        });
    }

    void TearDown() override {}

    unsigned int m_pc = 0;
};

TEST_F(RetroDebuggerExamples, list_StartingAddress) {
    // list commands from addresses 0x0010 through 0x0014
    Rdb::ProcessCommandString("list 0x10");

    // Get the response and check that it is the expected values from our
    const auto expectedResults = "0x0010  LD\t  DE, 0x803E\n0x0013  LD\t  (HL-), A\n0x0014  LD\t  (C), A\n0x0015  INC\t  C\n0x0016  LD\t  A, 0x243\n0x0018  LD\t  (C), A\n0x0019  LD\t  (HL-), A\n0x001A  LD\t  A, 0x119\n0x001C  LD\t  (HL), A\n0x001D  LD\t  A, 0x252\n";
    ASSERT_EQ(Rdb::GetCommandResponse(), expectedResults);
}

TEST_F(RetroDebuggerExamples, list_RangeOfAddress) {
    // list commands from addresses 0x0010 through 0x0014
    Rdb::ProcessCommandString("list 0x10-0x14");

    // Get the response and check that it is the expected values from our
    const auto expectedResults = "0x0010  LD\t  DE, 0x803E\n0x0013  LD\t  (HL-), A\n0x0014  LD\t  (C), A\n";
    ASSERT_EQ(Rdb::GetCommandResponse(), expectedResults);
}

}